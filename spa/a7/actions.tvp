%action uninterpreted() { 
  %t "uninterpreted"
}

%action skip() { 
  %t "skip"
}

%action fork() {
  %t "fork"
  %p 1
}

///////////////////////////////////////////////////////////////////////////
// Actions for statements manipulating pointer variables and pointer fields

%action Set_Null_L(lhs) {
  %t lhs + " = NULL"
  {
    lhs(v) = 0
  }
  // xWrite
}

%action Copy_Var_L(lhs, rhs) {
  %t lhs + " = " + rhs
  %f { rhs(v) } 
  %message (E(node) rhs(node) & freed(node)) ->
           "Warning: Propagating freed pointer."
  {
    lhs(v) = rhs(v) 
  }
  // xRW xRead xWrite
}

%action Malloc_L(lhs) {
  %t lhs + " = (L) malloc(sizeof(struct node)) "
  %new
  {
    lhs(v) = isNew(v)
    t[n](v_1, v_2) = (isNew(v_1) ? v_1 == v_2 : t[n](v_1, v_2))
    r[n, lhs](v) = isNew(v)
    foreach(z in PVar-{lhs}) {
      r[n,z](v) = r[n,z](v)
    }
    heap_shared[n](v) = heap_shared[n](v)

    freed(node) = freed(node) & !isNew(node)
    // needed(node) = needed(node) | isNew(node)
  }
  // xWrite
}

%action Free_L(lhs) {
  %t "free(" + lhs + ")"
  %f { lhs(v) }
  %message (E(node) lhs(node) & freed(node)) ->
           "Error: Double free detected!"
  %message (E(v, v_1) lhs(v) & n(v, v_1)) ->
           "Internal Error! " + lhs + "->" + n + " != NULL"
  {
    t[n](v_1, v_2) = t[n](v_1, v_2)
    foreach(z in PVar) {
      r[n,z](v) = r[n,z](v)
    }
    heap_shared[n](node) = heap_shared[n](node)

    freed(node) = freed(node) | lhs(node)
    // acc[n](node) = acc[n](node)
    // zombie(node) = zombie(node) | lhs(node)
    // needed(node) = needed(node)
  }
  // xRead
}

%action Get_Next_L(lhs, rhs) {
  %t lhs + " = " + rhs + "->" + n
  %f { E(v_1, v_2) rhs(v_1) & n(v_1, v_2) &  t[n](v_2, v) }
  %message (!E(v) rhs(v)) ->
           "Illegal dereference to\n" + n + " component of " + rhs
  %message (E(node) rhs(node) & freed(node)) ->
           "Error: Accessing next field of freed node."
  %message (E(node_1, node_2) rhs(node_1) & n(node_1, node_2) & freed(node_2)) ->
           "Warning: Propagating freed pointer."
  {
    lhs(v) = E(v_1) rhs(v_1) & n(v_1, v)
  }
  // xRW xRead xWrite
}

%action Set_Next_Null_L(lhs) {
  %t lhs + "->" + n + " = NULL"
  %f { 
       lhs(v),
       // optimized change-formula for t[n] update-formula
       E(v_1, v_2) lhs(v_1) & n(v_1, v_2) & t[n](v_2, v)   
     }
  %message (!E(v) lhs(v)) -> "Illegal dereference to\n" +
                             n + " component of " + lhs
  %message (E(node) lhs(node) & freed(node)) ->
           "Error: Accessing next field of freed node."
  {
    n(v_1, v_2) = n(v_1, v_2) & !lhs(v_1)
  }

  // xRW xRead xWrite
}

%action Set_Next_L(lhs, rhs) {
  %t lhs + "->" + n + " = " + rhs
  %f {
       lhs(v), rhs(v),
       // optimized change-formula for t[n] upate-formula
       E(v_4) rhs(v_4) & t[n](v_4, v_2)
     }
  %message (E(v_1, v_2) lhs(v_1) & n(v_1, v_2)) ->
           "Internal Error! " + lhs + "->" + n + " != NULL"
  %message (E(v_1, v_2) lhs(v_1) & rhs(v_2) & t[n](v_2, v_1)) -> 
           "A cycle may be introduced\nby assignment " + lhs + "->" + n + "=" + rhs
  %message (E(node) rhs(node) & freed(node)) ->
           "Warning: Propagating freed pointer"
  %message (E(node) lhs(node) & freed(node)) ->
           "Error: Accessing next field of freed node."
  {
    n(v_1, v_2) = n(v_1, v_2) | lhs(v_1) & rhs(v_2)
  }

  // xRW xRead x2 xWrite
}

//////////////////////////////////////////////////////////////////
// Actions needed to simulate program conditions involving pointer
// equality tests.

%action Is_Not_Null_Var(lhs) {
  %t lhs + " != NULL"
  %f { lhs(v) } 
  %p (E(v) lhs(v))
  %message (E(node) lhs(node) & freed(node)) ->
           "Warning: Comparing freed pointer to NULL."
  // xRead
}

%action Is_Null_Var(lhs) {
  %t lhs + " == NULL"
  %f { lhs(v) } 
  %p !(E(v) lhs(v))
  %message (E(node) lhs(node) & freed(node)) ->
           "Warning: Comparing freed pointer to NULL."

  // xRead
}

%action Is_Eq_Var(lhs, rhs) {
  %t lhs + " == " + rhs
  %f { lhs(v), rhs(v) } 
  %p (A(v) lhs(v) <-> rhs(v)) | (E(node) (lhs(node) | rhs(node)) & freed(node))
  %message (E(node) (rhs(node) | lhs(node)) & freed(node)) ->
           "Warning: Comparing a freed pointer to another pointer"
  // xRead
}

%action Is_Not_Eq_Var(lhs, rhs) {
  %t lhs + " != " + rhs
  %f { lhs(v), rhs(v) } 
  %p (!A(v) lhs(v) <-> rhs(v)) | (E(node) (lhs(node) | rhs(node)) & freed(node))
  %message (E(node) (rhs(node) | lhs(node)) & freed(node)) ->
           "Warning: Comparing a freed pointer to another pointer"
  // xRead
}


/////////////////////////////////////////
// Actions for testing various properties

%action Assert_ListInvariants(lhs) {
  %t "assertListInvariants(" + lhs + ")"
  %f { lhs(v) }
  %p E(v) r[n,lhs](v) & heap_shared[n](v)
  %message ( E(v) r[n,lhs](v) & heap_shared[n](v) ) -> 
           "The list pointed by " + lhs + " may be shared!"
}

%action Assert_No_Leak(lhs) {
  %t "assertNoLeak(" + lhs + ")"
  %f { lhs(v) }
  %p E(v) !r[n,lhs](v)
  %message ( E(v) !r[n,lhs](v) ) -> 
           "There may be a list element not reachable from variable " + lhs + "!"
}
