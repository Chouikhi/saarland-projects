//////////////////
// Core Predicates

// For every program variable z there is a unary predicate that holds for
// list elements pointed by z.
// The unique property is used to convey the fact that the predicate can hold
// for at most one individual.
// The pointer property is a visualization hint for graphical renderers.
foreach (pv in PVar) {
  %p pv(node) unique pointer
}

// The predicate n represents the n field of the list data type.
%p n(node_1, node_2) function acyclic

// Weather this block is already freed (free was called on it).
%p freed(node_1)

/////////////////////////////////////////////
// Instrumentation (i.e., derived) predicates

// The heap_shared[n] predicate holds for list elements pointed by two
// different list elements.
%i heap_shared[n](node) = E(node_1, node_2) (node_1 != node_2
                                            & n(node_1, node) & n(node_2, node))

// The t[n] predicate records transitive reflexive reachability between
// list elements along the n field.
%i t[n](node_1, node_2) = n*(node_1, node_2) transitive reflexive

// For every program variable z the predicate r[n,pv] holds for individual
// v when v is reachable from variable z along the n field (more formally,
// the corresponding list element is reachable from z).
foreach (pv in PVar) {
  %i r[n,pv](node) = E(node_1) (pv(node_1) & t[n](node_1, node))
}

// Accessible predicate -- weather we can reach the block from the variables
// -- directly, or following some next fields.
%i acc[n](node) = |/{ r[n,pv](node) : pv in PVar }

// zombie predicate -- represents blocks that are freed, but still accessible
%i zombie(node) = freed(node) & acc[n](node)

// needed nodes -- this is used for retaining nodes in actions
%i needed(node) = !freed(node) | acc[n](node) nonabs


// Integrity constraints for transitive reachability
%r !t[n](v_1, v_2) ==> !n(v_1, v_2)
%r !t[n](v_1, v_2) ==> v_1 != v_2
%r E(v_1) (t[n](v_1, v_2) & t[n](v_1, v_3) & !t[n](v_2, v_3)) ==> t[n](v_3, v_2)

